class Task{static start(a){const b=Task.next(a);void 0!=b?chrome.alarms.create(a.id,{when:b}):chrome.alarms.clear(a.id)}static next(a){const b=a.time.sort(Task.compareTime),e=Date.now()+10,d=a.type;if("once"==d){var c=a.date;c=Task.nextForTime(new Date(c[0],c[1]-1,c[2]),b,e)}else"day"==d?(a=new Date,c=Task.nextForTime(a,b,e),void 0==c&&(a.setDate(a.getDate()+1),c=Task.nextForTime(a,b,e))):"week"==d?c=Task.nextForWeek(a.week.sort(),b,e):"month"==d?c=Task.nextForMonth(a.month.sort(),b,e):"year"==d&&
(c=Task.nextForYear(a.year.sort(Task.compareYearDays),b,e));return c}static nextForTime(a,b,e){let d=void 0;for(var c=0;c<b.length;c++)if(a.setHours(b[c][0],b[c][1],0,0),a.getTime()>e){d=a.getTime();break}return d}static nextForWeek(a,b,e){var d=(new Date).getDay();let c=[];for(var g=0;g<a.length;g++)if(d==a[g]){c.push(new Date);var f=new Date;f.setDate(f.getDate()+7);c.push(f)}else{f=a[g]-d;0>f&&(f+=7);let h=new Date;h.setDate(h.getDate()+f);c.push(h)}a=[];for(g=0;g<c.length;g++)for(d=0;d<b.length;d++)f=
c[g],f.setHours(b[d][0],b[d][1],0,0),f.getTime()>e&&a.push(f.getTime());return a.sort()[0]}static nextForMonth(a,b,e){let d=void 0;-1==a[0]&&(a.shift(),a.push(-1));var c=new Date;const g=c.getFullYear();c=c.getMonth();const f=c+5;for(;c<f;){for(var h=0;h<a.length;h++){let k=a[h];-1==k&&(k=(new Date(g,c+1,0)).getDate());let l=new Date(g,c,k);if(Task.validateDay(l,g,c,k)&&(d=Task.nextForTime(l,b,e),void 0!=d))return d}c++}return d}static nextForYear(a,b,e){let d=void 0,c=(new Date).getFullYear();const g=
c+5;for(;c<g;){for(var f=0;f<a.length;f++){const h=a[f][0]-1,k=a[f][1];let l=new Date(c,h,k);if(Task.validateDay(l,c,h,k)&&(d=Task.nextForTime(l,b,e),void 0!=d))return d}c++}return d}static validateDay(a,b,e,d){return a.getFullYear()==b&&a.getMonth()==e&&a.getDate()==d}static compareTime(a,b){return 60*a[0]+a[1]-(60*b[0]+b[1])}static compareYearDays(a,b){const e=a[0]-b[0];return 0!=e?e:a[1]-b[1]}static startAll(){for(let [a,b]of Object.entries(Settings))a.startsWith("task-")&&(b.enable?Task.start(b):
chrome.alarms.clear(b.id))}static check(a){a=new Map(a.map(b=>[b.name,b]));for(let [b,e]of Object.entries(Settings))if(b.startsWith("task-")){const d=a.has(b);e.enable&&!d?void 0!=Task.next(e)&&Task.start(e):!e.enable&&d?chrome.alarms.clear(e.id):e.enable&&d&&a.get(b).scheduledTime!=Task.next(e)&&(console.log("invalid task time"),Task.start(e))}}static onAlarm(a,b){b&&(Helper.updateTime&&2E4>Date.now()-Helper.updateTime||TaskNotify.notify(a,b),Task.start(b))}static onMessage(a){"StartTask"==a.type&&
a.task&&Task.start(a.task)}}
class TaskNotify{static notify(a,b){Settings.muteAll||(b.voiceNotify&&chrome.tts.speak(b.text,Settings.tts),b.systemNotify&&TaskNotify.systemNotify(a,b))}static systemNotify(a,b){const e={type:"basic",iconUrl:"/icon/event.png",title:chrome.i18n.getMessage("notify_task_title"),message:b.text,eventTime:a.scheduledTime,buttons:[{title:chrome.i18n.getMessage("notify_button_settings")}]};a=b.notifyClose?b.notifyClose:"1";"auto"!=a&&(e.requireInteraction=!0);const d=b.id;chrome.notifications.clear(d,function(){chrome.notifications.create(d,
e)});if("never"!=a){a="auto"==a?5:parseInt(a,10);1==a&&(a=2);let c=new Date;c.setMinutes(c.getMinutes()+a,0,0);chrome.alarms.create("clear-"+b.id,{when:c.getTime()})}}static clearNotification(a){chrome.notifications.clear(a.substring(6))}};
